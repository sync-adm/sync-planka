services:
  planka-server:
    build:
      context: .
      dockerfile: Dockerfile.dev
    image: planka-dev
    pull_policy: never
    command: ["bash", "-c", "npm install && npm run db:init && npm start"]
    restart: on-failure
    volumes:
      - ./server:/app
    ports:
      - 1337:1337
    environment:
      - BASE_URL=http://localhost:1337
      - DATABASE_URL=postgresql://postgres@postgres:5432/planka
      - SECRET_KEY=notsecretkey
      - EVOLUTION_INSTANCE=Marketing
      - EVOLUTION_API_KEY=26115CD7A8CF-436A-A215-A848F368DCDE
      - EVOLUTION_BASE_ADDRESS=https://evolution-api.sync.com.br
      - POSTIZ_BASE_ADDRESS=https://postiz.sync.dev.br
      - POSTIZ_API_KEY=f85d15a766a2a8250bf5ac39394e85ae26c5a32b3a3aac7778c13a329013aed6

      # - LOG_LEVEL=warn

      # - TRUST_PROXY=true
      # - TOKEN_EXPIRES_IN=365 # In days

      # related: https://github.com/knex/knex/issues/2354
      # As knex does not pass query parameters from the connection string,
      # we have to use environment variables in order to pass the desired values, e.g.
      # - PGSSLMODE=<value>

      # Configure knex to accept SSL certificates
      # - KNEX_REJECT_UNAUTHORIZED_SSL_CERTIFICATE=false

      # Used for per-board notifications
      # - DEFAULT_LANGUAGE=en-US

      # Do not comment out DEFAULT_ADMIN_EMAIL if you want to prevent this user from being edited/deleted
      - DEFAULT_ADMIN_EMAIL=demo@demo.demo
      - DEFAULT_ADMIN_PASSWORD=demo
      - DEFAULT_ADMIN_NAME=Demo Demo
      - DEFAULT_ADMIN_USERNAME=demo

      # - ACTIVE_USERS_LIMIT=

      # Set to true to show more detailed authentication error messages.
      # It should not be enabled without a rate limiter for security reasons.
      - SHOW_DETAILED_AUTH_ERRORS=false

      - S3_ENDPOINT=https://gateway.storjshare.io
      - S3_REGION=US1
      - S3_ACCESS_KEY_ID=jubganahejfyqpgswqv3dukctyga
      - S3_SECRET_ACCESS_KEY=jynyabogrr2sxaolyhikaiveqbo3yz2wkd2jbyxu6q4sgpge6orz6
      - S3_BUCKET=planka-marketing
      - S3_FORCE_PATH_STYLE=true

      - OIDC_ISSUER=https://sync-login-dev.us.auth0.com/
      - OIDC_CLIENT_ID=h12Y9Op3FwJYHCa8EDetIhPOAmVtmv8B
      - OIDC_CLIENT_SECRET=3kephuz-TvXZoyCGQpThowxl4TcA5OeKiqerljjhesHl8earNJpuYuBTEkv-yQwh
      - OIDC_ID_TOKEN_SIGNED_RESPONSE_ALG=RS256
      - OIDC_USERINFO_SIGNED_RESPONSE_ALG=RS256
      - OIDC_SCOPES=openid email profile
      - OIDC_RESPONSE_MODE=fragment
      - OIDC_USE_DEFAULT_RESPONSE_MODE=true
      - OIDC_ADMIN_ROLES=admin
      - OIDC_CLAIMS_SOURCE=id_token
      - OIDC_EMAIL_ATTRIBUTE=email
      - OIDC_NAME_ATTRIBUTE=name
      - OIDC_USERNAME_ATTRIBUTE=preferred_username
      - OIDC_ROLES_ATTRIBUTE=groups
      - OIDC_IGNORE_USERNAME=true
      - OIDC_IGNORE_ROLES=true
      - OIDC_ENFORCED=true

      # Email Notifications (https://nodemailer.com/smtp/)
      # - SMTP_HOST=
      # - SMTP_PORT=587
      # - SMTP_NAME=
      # - SMTP_SECURE=true
      # - SMTP_USER=
      # - SMTP_PASSWORD=
      # - SMTP_FROM="Demo Demo" <demo@demo.demo>
      # - SMTP_TLS_REJECT_UNAUTHORIZED=false

      # Optional fields: accessToken, events, excludedEvents
      # - |
      #   WEBHOOKS=[{
      #     "url": "http://localhost:3001",
      #     "accessToken": "notaccesstoken",
      #     "events": ["cardCreate", "cardUpdate", "cardDelete"],
      #     "excludedEvents": ["notificationCreate", "notificationUpdate"]
      #   }]
    depends_on:
      postgres:
        condition: service_healthy

  planka-client:
    image: planka-dev
    pull_policy: never
    command: ["bash", "-c", "npm install && npx vite --host"]
    restart: on-failure
    volumes:
      - ./client:/app
    ports:
      - 3000:3000

  postgres:
    image: postgres:16-alpine
    restart: on-failure
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=planka
      - POSTGRES_HOST_AUTH_METHOD=trust
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-planka} && psql -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-planka} -c 'SELECT 1'",
        ]
      interval: 3s
      timeout: 5s
      retries: 15
      start_period: 10s

volumes:
  db-data:
